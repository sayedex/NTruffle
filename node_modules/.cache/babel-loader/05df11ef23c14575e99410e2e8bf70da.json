{"ast":null,"code":"var _jsxFileName = \"/home/sa/Desktop/Sayed/Sayed/src/Com/Test.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Web3ReactProvider } from '@web3-react/core';\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"./img/Connnector\";\nimport Abi from \"./Abi.json\";\nimport Web3 from 'web3';\nimport Devtoken from \"./Devtoken.json\";\nimport Tokensale from \"./Tokensale.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TestWeb3 = () => {\n  _s();\n\n  const [value, setvalue] = useState();\n  const [store, sestore] = useState();\n  const [totalsupply, settotalsupply] = useState();\n  const [tokencontract, settokencontact] = useState();\n  const [userdeta, setuserdeta] = useState(\"\");\n  const [balanceofuser, setbalanceofuser] = useState();\n  const [Devtokensale, setDevtokensale] = useState();\n  const [tokenprice, settokenprice] = useState();\n  const [totalsolda, settotalsolda] = useState();\n\n  const change = e => {\n    setvalue(e.target.value);\n  };\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      await window.ethereum.enable();\n    } else {\n      window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n    }\n  };\n\n  const loadBlockchainData = async () => {\n    // setLoading(true);\n    if (typeof window.ethereum == \"undefined\") {\n      return;\n    }\n\n    const web3 = new Web3(window.ethereum);\n    let url = window.location.href;\n    const accounts = await web3.eth.getAccounts();\n    setuserdeta(accounts);\n    const hello = new web3.eth.Contract(Devtoken.abi, \"0xED5917ff7Da8C6818f93988205e7dBbf3Fbf7D42\");\n    const Tokensalecontact = new web3.eth.Contract(Tokensale.abi, \"0xd687bfd48aE675c66294B6ccDD4af570e81fbc5f\");\n    settokencontact(hello);\n    setDevtokensale(Tokensalecontact);\n    let totalsupplyS = await hello.methods.totalSupply().call();\n    const totalsupply = await web3.utils.fromWei(totalsupplyS, 'ether');\n    settotalsupply(totalsupply); //Token price facthing \n    // if (accounts.length == 0) {\n    //   return;\n    // }\n    // setAccount(accounts[0]);\n    // const networkId = await web3.eth.net.getId();\n    ///user balance factching \n\n    const balanceofuser = await hello.methods.balanceOf(accounts[0]).call();\n    const totalsold = await Tokensalecontact.methods.totalsold().call();\n    const Tokenprice = await Tokensalecontact.methods.tokenprice().call();\n    const Realtokenprice = await web3.utils.fromWei(Tokenprice, 'ether');\n    settokenprice(Realtokenprice);\n    const totalsoldtotal = await web3.utils.fromWei(totalsold, 'ether');\n    settotalsolda(totalsoldtotal);\n    const balanceofuserinwei = await web3.utils.fromWei(balanceofuser, 'ether');\n    setbalanceofuser(balanceofuserinwei);\n  };\n\n  const handlechnage = () => {// tokencontract.methods.approve(\"0xe76899F7E3400e276fA8ec99d03C9F0421dE2d9d\", 100000).send({ from: userdeta.toString()})\n  };\n\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData(); //esl\n  }, []);\n\n  const changeininputfield = e => {\n    console.log(e.target.value);\n    setvalue(e.target.value);\n  };\n\n  const SendTrsnsation = async e => {\n    e.preventDefault();\n    const web3 = new Web3(window.ethereum);\n    const amountofethinwei = await web3.utils.toWei(value.toString());\n    tokencontract.methods.approve(\"0xd687bfd48aE675c66294B6ccDD4af570e81fbc5f\", value).send({\n      from: userdeta.toString()\n    });\n    await Devtokensale.methods.buyTokens().send({\n      from: userdeta.toString(),\n      value: value\n    }).once(\"recepient\", recepient => {\n      alert(\"sucess\");\n    }).on(\"error\", () => {\n      window.alert(\"error \");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Total supply \", totalsupply, \" Dev Token\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"You have \", balanceofuser, \" Dev token man!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Total Sold \", totalsolda, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: SendTrsnsation,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"\",\n        value: value,\n        onChange: changeininputfield,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 71\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Buy Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TestWeb3, \"Ibk5+UQcIcL1cz75DuZMxxy3LAA=\");\n\n_c = TestWeb3;\nexport default TestWeb3; // const web3 = new Web3(window.ethereum);\n// const amountofethinwei = await web3.utils.toWei(a.toString())\n// await presalecontractinstance\n// .methods\n// .buyTokens()\n// .send({from:account , value : amountofethinwei })\n//   .once(\"recepient\", (recepient) => {\n//    window.alert(\"sucess\")\n//   })\n//   .on(\"error\", () => {\n//     window.alert(\"error \")\n//   });\n\nvar _c;\n\n$RefreshReg$(_c, \"TestWeb3\");","map":{"version":3,"sources":["/home/sa/Desktop/Sayed/Sayed/src/Com/Test.jsx"],"names":["React","useEffect","useState","Web3ReactProvider","useWeb3React","injected","Abi","Web3","Devtoken","Tokensale","TestWeb3","value","setvalue","store","sestore","totalsupply","settotalsupply","tokencontract","settokencontact","userdeta","setuserdeta","balanceofuser","setbalanceofuser","Devtokensale","setDevtokensale","tokenprice","settokenprice","totalsolda","settotalsolda","change","e","target","loadWeb3","window","ethereum","enable","alert","loadBlockchainData","web3","url","location","href","accounts","eth","getAccounts","hello","Contract","abi","Tokensalecontact","totalsupplyS","methods","totalSupply","call","utils","fromWei","balanceOf","totalsold","Tokenprice","Realtokenprice","totalsoldtotal","balanceofuserinwei","handlechnage","changeininputfield","console","log","SendTrsnsation","preventDefault","amountofethinwei","toWei","toString","approve","send","from","buyTokens","once","recepient","on"],"mappings":"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","sourcesContent":["import React,{useEffect,useState} from \"react\"\nimport { Web3ReactProvider } from '@web3-react/core'\nimport { useWeb3React } from \"@web3-react/core\"\nimport { injected } from \"./img/Connnector\"\nimport Abi from \"./Abi.json\"\nimport Web3 from 'web3'\nimport Devtoken from \"./Devtoken.json\"\nimport Tokensale from \"./Tokensale.json\"\n\nconst TestWeb3 = ()=>{\n  const [value,setvalue] = useState();\n  const [store,sestore] = useState()\n  const [totalsupply,settotalsupply] = useState()\n  const [tokencontract,settokencontact] =useState()\n  const [userdeta,setuserdeta] = useState(\"\")\n  const [balanceofuser,setbalanceofuser] = useState();\n  const [Devtokensale,setDevtokensale] = useState()\n  const [tokenprice,settokenprice] = useState();\n  const [totalsolda,settotalsolda] = useState();\n  const change = (e)=>{\n    setvalue(e.target.value);\n  }\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      await window.ethereum.enable();\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  };\n  const loadBlockchainData = async () => {\n    // setLoading(true);\n    if (\n      typeof window.ethereum == \"undefined\" \n    ) {\n      return;\n    }\n    const web3 = new Web3(window.ethereum);\n\n    let url = window.location.href;\n  \n    const accounts = await web3.eth.getAccounts();\n    setuserdeta(accounts)\n    const hello = new web3.eth.Contract(Devtoken.abi,\"0xED5917ff7Da8C6818f93988205e7dBbf3Fbf7D42\");\n    const Tokensalecontact = new web3.eth.Contract(Tokensale.abi,\"0xd687bfd48aE675c66294B6ccDD4af570e81fbc5f\")\n    settokencontact(hello)\n    setDevtokensale(Tokensalecontact);\n     let totalsupplyS = await hello.methods.totalSupply().call();\n     const totalsupply = await web3.utils.fromWei(totalsupplyS,'ether')\n        settotalsupply(totalsupply)\n\n\n\n        //Token price facthing \n\n    // if (accounts.length == 0) {\n    //   return;\n    // }\n    // setAccount(accounts[0]);\n    // const networkId = await web3.eth.net.getId();\n///user balance factching \n\nconst balanceofuser = await hello.methods.balanceOf(accounts[0]).call();\nconst totalsold = await Tokensalecontact.methods.totalsold().call();\nconst Tokenprice = await Tokensalecontact.methods.tokenprice().call();\nconst Realtokenprice = await web3.utils.fromWei(Tokenprice,'ether')\nsettokenprice(Realtokenprice)\nconst totalsoldtotal = await web3.utils.fromWei(totalsold,'ether')\nsettotalsolda(totalsoldtotal)\nconst balanceofuserinwei = await web3.utils.fromWei(balanceofuser,'ether')\n\nsetbalanceofuser(balanceofuserinwei);};\n\n  const handlechnage = ()=>{\n\n    // tokencontract.methods.approve(\"0xe76899F7E3400e276fA8ec99d03C9F0421dE2d9d\", 100000).send({ from: userdeta.toString()})\n  }\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData();\n\n    //esl\n  }, []);\n  const changeininputfield = (e)=>{\n    console.log(e.target.value)\n    setvalue(e.target.value);\n  }\nconst SendTrsnsation = async (e)=>{\ne.preventDefault();    const web3 = new Web3(window.ethereum);\nconst amountofethinwei = await web3.utils.toWei(value.toString());\ntokencontract.methods.approve(\"0xd687bfd48aE675c66294B6ccDD4af570e81fbc5f\", value).send({ from: userdeta.toString()})\n await Devtokensale.methods.buyTokens()  .send({from:userdeta.toString() , value : value })\n   .once(\"recepient\", (recepient) => {\n   alert(\"sucess\")\n  })\n  .on(\"error\", () => {\n   window.alert(\"error \")\n   });\n\n}\nreturn (\n    <>\n<h1>Total supply {totalsupply} Dev Token</h1>\n<h1>You have {balanceofuser} Dev token man!</h1>\n<h1>Total Sold {totalsolda} </h1>\n{/* <h1>Token Price : {tokenprice} ETH</h1> */}\n<form onSubmit={SendTrsnsation}>\n\n<input type=\"\"  value={value} onChange={changeininputfield} required/><br/>\n<button type=\"submit\">Buy Now</button>\n\n\n</form>\n\n\n    </>\n)\n\n\n\n\n}\n\nexport default TestWeb3;\n\n\n\n\n\n\n\n\n\n\n// const web3 = new Web3(window.ethereum);\n \n// const amountofethinwei = await web3.utils.toWei(a.toString())\n\n\n// await presalecontractinstance\n// .methods\n// .buyTokens()\n// .send({from:account , value : amountofethinwei })\n//   .once(\"recepient\", (recepient) => {\n//    window.alert(\"sucess\")\n//   })\n//   .on(\"error\", () => {\n//     window.alert(\"error \")\n//   });"]},"metadata":{},"sourceType":"module"}