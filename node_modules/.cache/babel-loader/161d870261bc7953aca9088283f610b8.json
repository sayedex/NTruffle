{"ast":null,"code":"var _jsxFileName = \"/home/sa/Desktop/Sayed/Sayed/src/Com/Staking.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Web3ReactProvider } from '@web3-react/core';\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"./img/Connnector\";\nimport Web3 from 'web3';\nimport BigNumber from \"bignumber.js\";\nimport Stakingabi from \"./Stakingabi.json\";\nimport CakeTokenabi from \"./CakeToken.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Staking = () => {\n  _s();\n\n  const [stakingamout, setstakingamout] = useState();\n  const [CakeCon, setCakeCon] = useState();\n  const [Stakingmainpool, setStakingmainpool] = useState();\n  const [user, ssetuser] = useState();\n  const [earn, setearn] = useState();\n  const [test, settestt] = useState(false);\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      await window.ethereum.enable();\n    } else {\n      window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n    }\n  };\n\n  const loadBlockchainData = async () => {\n    // setLoading(true);\n    if (typeof window.ethereum == \"undefined\") {\n      return;\n    }\n\n    const web3 = new Web3(window.ethereum);\n    let url = window.location.href;\n    const StakingContract = new web3.eth.Contract(Stakingabi.abi, \"0x4311F1bBd707a53823D0a7ed488507694C0A226C\");\n    setStakingmainpool(StakingContract);\n    const CaketokenCon = new web3.eth.Contract(CakeTokenabi.abi, \"0x16c189981660f8bf84c54c12351f0ba342b9ffc0\");\n    setCakeCon(CaketokenCon);\n    const accounts = await web3.eth.getAccounts();\n    ssetuser(accounts[0]); //reward Earning \n    //  const balanceofuser = await hello.methods.balanceOf(accounts[0]).call();\n\n    const balanceofreward = await StakingContract.methods.earned(accounts[0]).call();\n    const TotalEarned = await web3.utils.fromWei(balanceofreward, 'ether');\n    console.log(TotalEarned);\n    setearn(TotalEarned); // setearn(Totalearning);  //reward Earning  \n    // const Tokensalecontact = new web3.eth.Contract(Tokensale.abi,\"0x9bD3FfF95ecd4DA1ba93679f87c9DEBc6b5fD534\")\n    //  let totalsupplyS = await hello.methods.totalSupply().call();\n    //  const totalsupply = await web3.utils.fromWei(totalsupplyS,'ether')\n    //Token price facthing \n    // if (accounts.length == 0) {\n    //   return;\n    // }\n    // setAccount(accounts[0]);\n    // const networkId = await web3.eth.net.getId();\n    ///user balance factching \n    // const balanceofuser = await hello.methods.balanceOf(accounts[0]).call();\n    // const totalsold = await Newtokensale.methods.totalsold().call();\n    // const Tokenprice = await Tokensalecontact.methods.tokenprice().call();\n    // const Realtokenprice = await web3.utils.fromWei(Tokenprice,'ether')\n    // const totalsoldtotal = await web3.utils.fromWei(totalsold,'ether')\n    // settotalsolda(totalsoldtotal)\n    // const balanceofuserinwei = await web3.utils.fromWei(balanceofuser,'ether')\n    // setbalanceofuser(balanceofuserinwei);};\n  };\n\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData(); //esl\n  }, []); ////new \n\n  const change = e => {\n    setstakingamout(e.target.value);\n  };\n\n  const approve = async s => {\n    s.preventDefault();\n    const web3 = new Web3(window.ethereum);\n    const Amount = await web3.utils.toWei(stakingamout);\n    CakeCon.methods.approve(\"0x4311F1bBd707a53823D0a7ed488507694C0A226C\", Amount).send({\n      from: user.toString()\n    }).on(\"transactionHash\", hash => {\n      window.alert(\"wwooow\");\n    });\n  };\n\n  const Send = async e => {\n    e.preventDefault();\n    const web3 = new Web3(window.ethereum);\n    const Amount = await web3.utils.toWei(stakingamout);\n    e.preventDefault();\n    Stakingmainpool.methods.stake(Amount).send({\n      from: user.toString()\n    }).on(\"transactionHash\", hash => {\n      window.alert(\"sucess\");\n      settestt(true);\n      console.log(\"aaa\");\n    });\n  };\n\n  const withdrawaasa = async e => {\n    e.preventDefault();\n    const web3 = new Web3(window.ethereum);\n    const Amount = await web3.utils.toWei(stakingamout);\n    await Stakingmainpool.methods.withdraw(Amount).send({\n      from: user.toString()\n    }).once(\"recepient\", recepient => {\n      window.alert(\"WOW! withdraw Done\");\n      window.location.reload(true);\n    }).on(\"error\", () => {\n      window.alert(\"plz Try Again \");\n    });\n    ; // await newtokensale.methods.buyTokens(newamountofethinwei).send({from:userdeta.toString() })\n    //      .once(\"recepient\", (recepient) => {\n    //       window.alert(\"sucess\");\n    //       window.location.reload();\n    //     })\n    //     .on(\"error\", () => {\n    //      window.alert(\"error \")\n    //      });\n    //   }\n  }; //new\n\n\n  const Emergencry = async e => {\n    e.preventDefault();\n    const web3 = new Web3(window.ethereum);\n    await Stakingmainpool.methods.getReward().send({\n      from: user.toString()\n    }).once(\"recepient\", recepient => {\n      window.alert(\"withdraw Done\");\n      window.location.reload();\n    }).on(\"error\", () => {\n      window.alert(\"plz Try Again \");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Your Reward \", earn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: change,\n        value: stakingamout,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: approve,\n        children: \"Approve Contract\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 52\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: Send,\n        children: \"Stake Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: withdrawaasa,\n        children: \"withdraw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: Emergencry,\n        children: \"Emergencry withdraw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 1\n    }, this)\n  }, void 0, false);\n};\n\n_s(Staking, \"7LZaeL5xvU84IzavVWWpkQop4aA=\");\n\n_c = Staking;\nexport default Staking; // const web3 = new Web3(window.ethereum);\n// const amountofethinwei = await web3.utils.toWei(a.toString())\n// await presalecontractinstance\n// .methods\n// .buyTokens()\n// .send({from:account , value : amountofethinwei })\n//   .once(\"recepient\", (recepient) => {\n//    window.alert(\"sucess\")\n//   })\n//   .on(\"error\", () => {\n//     window.alert(\"error \")\n//   })\n// CakeCon.methods.approve(\"0x4311F1bBd707a53823D0a7ed488507694C0A226C\",Amount).send({from:user.toString()}).on('transactionHash',(hash)=>{\n//   hash?\n//    Stakingmainpool.methods.stake(Amount).send({from:user.toString()}).on(\"transactionHash\",(hash)=>{\n//     window.alert(\"sucess\");\n//   }):\n//   window.alert(\"Failed\");\n\nvar _c;\n\n$RefreshReg$(_c, \"Staking\");","map":{"version":3,"sources":["/home/sa/Desktop/Sayed/Sayed/src/Com/Staking.jsx"],"names":["React","useEffect","useState","Web3ReactProvider","useWeb3React","injected","Web3","BigNumber","Stakingabi","CakeTokenabi","Staking","stakingamout","setstakingamout","CakeCon","setCakeCon","Stakingmainpool","setStakingmainpool","user","ssetuser","earn","setearn","test","settestt","loadWeb3","window","ethereum","enable","alert","loadBlockchainData","web3","url","location","href","StakingContract","eth","Contract","abi","CaketokenCon","accounts","getAccounts","balanceofreward","methods","earned","call","TotalEarned","utils","fromWei","console","log","change","e","target","value","approve","s","preventDefault","Amount","toWei","send","from","toString","on","hash","Send","stake","withdrawaasa","withdraw","once","recepient","reload","Emergencry","getReward"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,QAAuC,OAAvC;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAGA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;;;;AACA,MAAMC,OAAO,GAAG,MAAI;AAAA;;AACpB,QAAM,CAACC,YAAD,EAAcC,eAAd,IAAiCV,QAAQ,EAA/C;AACA,QAAM,CAACW,OAAD,EAASC,UAAT,IAAuBZ,QAAQ,EAArC;AACA,QAAM,CAACa,eAAD,EAAiBC,kBAAjB,IAAuCd,QAAQ,EAArD;AACA,QAAM,CAACe,IAAD,EAAMC,QAAN,IAAkBhB,QAAQ,EAAhC;AACA,QAAM,CAACiB,IAAD,EAAMC,OAAN,IAAiBlB,QAAQ,EAA/B;AACA,QAAM,CAACmB,IAAD,EAAMC,QAAN,IAAkBpB,QAAQ,CAAC,KAAD,CAAhC;;AACE,QAAMqB,QAAQ,GAAG,YAAY;AAC3B,QAAIC,MAAM,CAACC,QAAX,EAAqB;AACnB,YAAMD,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAAN;AACD,KAFD,MAEO;AACLF,MAAAA,MAAM,CAACG,KAAP,CACE,qEADF;AAGD;AACF,GARD;;AASA,QAAMC,kBAAkB,GAAG,YAAY;AACrC;AACA,QACE,OAAOJ,MAAM,CAACC,QAAd,IAA0B,WAD5B,EAEE;AACA;AACD;;AACD,UAAMI,IAAI,GAAG,IAAIvB,IAAJ,CAASkB,MAAM,CAACC,QAAhB,CAAb;AAEA,QAAIK,GAAG,GAAGN,MAAM,CAACO,QAAP,CAAgBC,IAA1B;AACA,UAAMC,eAAe,GAAG,IAAIJ,IAAI,CAACK,GAAL,CAASC,QAAb,CAAsB3B,UAAU,CAAC4B,GAAjC,EAAqC,4CAArC,CAAxB;AACApB,IAAAA,kBAAkB,CAACiB,eAAD,CAAlB;AACA,UAAMI,YAAY,GAAG,IAAIR,IAAI,CAACK,GAAL,CAASC,QAAb,CAAsB1B,YAAY,CAAC2B,GAAnC,EAAuC,4CAAvC,CAArB;AACAtB,IAAAA,UAAU,CAACuB,YAAD,CAAV;AACA,UAAMC,QAAQ,GAAG,MAAMT,IAAI,CAACK,GAAL,CAASK,WAAT,EAAvB;AACCrB,IAAAA,QAAQ,CAACoB,QAAQ,CAAC,CAAD,CAAT,CAAR,CAfoC,CAmBpC;AACD;;AACA,UAAME,eAAe,GAAG,MAAMP,eAAe,CAACQ,OAAhB,CAAwBC,MAAxB,CAA+BJ,QAAQ,CAAC,CAAD,CAAvC,EAA4CK,IAA5C,EAA9B;AACA,UAAMC,WAAW,GAAG,MAAMf,IAAI,CAACgB,KAAL,CAAWC,OAAX,CAAmBN,eAAnB,EAAmC,OAAnC,CAA1B;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACAxB,IAAAA,OAAO,CAACwB,WAAD,CAAP,CAxBqC,CAyBrC;AAEA;AACA;AACA;AAGI;AAEJ;AACA;AACA;AACA;AACA;AACJ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,GAjDD;;AAkDA3C,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,QAAQ;AACRK,IAAAA,kBAAkB,GAFJ,CAId;AACD,GALQ,EAKN,EALM,CAAT,CAlEkB,CA0EpB;;AAEA,QAAMqB,MAAM,GAAGC,CAAD,IAAK;AACftC,IAAAA,eAAe,CAACsC,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;AAEH,GAHD;;AAIA,QAAMC,OAAO,GAAG,MAAMC,CAAN,IAAU;AACxBA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAM1B,IAAI,GAAG,IAAIvB,IAAJ,CAASkB,MAAM,CAACC,QAAhB,CAAb;AACA,UAAM+B,MAAM,GAAG,MAAM3B,IAAI,CAACgB,KAAL,CAAWY,KAAX,CAAiB9C,YAAjB,CAArB;AACAE,IAAAA,OAAO,CAAC4B,OAAR,CAAgBY,OAAhB,CAAwB,4CAAxB,EAAqEG,MAArE,EACAE,IADA,CACK;AAACC,MAAAA,IAAI,EAAC1C,IAAI,CAAC2C,QAAL;AAAN,KADL,EAC6BC,EAD7B,CACgC,iBADhC,EACoDC,IAAD,IAAU;AAC9DtC,MAAAA,MAAM,CAACG,KAAP,CAAa,QAAb;AAGA,KALC;AAMD,GAVD;;AAWA,QAAMoC,IAAI,GAAG,MAAOb,CAAP,IAAW;AACpBA,IAAAA,CAAC,CAACK,cAAF;AACA,UAAM1B,IAAI,GAAG,IAAIvB,IAAJ,CAASkB,MAAM,CAACC,QAAhB,CAAb;AACA,UAAM+B,MAAM,GAAG,MAAM3B,IAAI,CAACgB,KAAL,CAAWY,KAAX,CAAiB9C,YAAjB,CAArB;AACFuC,IAAAA,CAAC,CAACK,cAAF;AACGxC,IAAAA,eAAe,CAAC0B,OAAhB,CAAwBuB,KAAxB,CAA8BR,MAA9B,EAAsCE,IAAtC,CAA2C;AAACC,MAAAA,IAAI,EAAC1C,IAAI,CAAC2C,QAAL;AAAN,KAA3C,EAAmEC,EAAnE,CAAsE,iBAAtE,EAAyFC,IAAD,IAAQ;AAC/FtC,MAAAA,MAAM,CAACG,KAAP,CAAa,QAAb;AACAL,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAyB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD,KAJA;AAMJ,GAXD;;AAYA,QAAMiB,YAAY,GAAG,MAAOf,CAAP,IAAW;AAC5BA,IAAAA,CAAC,CAACK,cAAF;AACA,UAAM1B,IAAI,GAAG,IAAIvB,IAAJ,CAASkB,MAAM,CAACC,QAAhB,CAAb;AACA,UAAM+B,MAAM,GAAG,MAAM3B,IAAI,CAACgB,KAAL,CAAWY,KAAX,CAAiB9C,YAAjB,CAArB;AACD,UAAMI,eAAe,CAAC0B,OAAhB,CAAwByB,QAAxB,CAAiCV,MAAjC,EAAyCE,IAAzC,CAA8C;AAACC,MAAAA,IAAI,EAAC1C,IAAI,CAAC2C,QAAL;AAAN,KAA9C,EAAsEO,IAAtE,CAA2E,WAA3E,EAAyFC,SAAD,IAAe;AAC5G5C,MAAAA,MAAM,CAACG,KAAP,CAAa,oBAAb;AACAH,MAAAA,MAAM,CAACO,QAAP,CAAgBsC,MAAhB,CAAuB,IAAvB;AACA,KAHK,EAILR,EAJK,CAIF,OAJE,EAIO,MAAM;AACjBrC,MAAAA,MAAM,CAACG,KAAP,CAAa,gBAAb;AACD,KANK,CAAN;AAMG,KAV0B,CAWhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACC,GArBD,CAvGoB,CA6HpB;;;AACA,QAAM2C,UAAU,GAAG,MAAOpB,CAAP,IAAW;AAC1BA,IAAAA,CAAC,CAACK,cAAF;AACA,UAAM1B,IAAI,GAAG,IAAIvB,IAAJ,CAASkB,MAAM,CAACC,QAAhB,CAAb;AACA,UAAMV,eAAe,CAAC0B,OAAhB,CAAwB8B,SAAxB,GAAoCb,IAApC,CAAyC;AAACC,MAAAA,IAAI,EAAC1C,IAAI,CAAC2C,QAAL;AAAN,KAAzC,EAAiEO,IAAjE,CAAsE,WAAtE,EAAoFC,SAAD,IAAe;AACpG5C,MAAAA,MAAM,CAACG,KAAP,CAAa,eAAb;AACAH,MAAAA,MAAM,CAACO,QAAP,CAAgBsC,MAAhB;AACA,KAHE,EAIFR,EAJE,CAIC,OAJD,EAIU,MAAM;AACjBrC,MAAAA,MAAM,CAACG,KAAP,CAAa,gBAAb;AACD,KANE,CAAN;AAOH,GAVD;;AAYA,sBACI;AAAA,2BAEJ;AAAA,8BAGA;AAAA,mCAAiBR,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,cAHA,eAIA;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAE8B,MAA7B;AAAqC,QAAA,KAAK,EAAEtC,YAA5C;AAA0D,QAAA,QAAQ;AAAlE;AAAA;AAAA;AAAA;AAAA,cAJA,eAKA;AAAA;AAAA;AAAA;AAAA,cALA,eAMA;AAAQ,QAAA,OAAO,EAAE0C,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANA,eAMmD;AAAA;AAAA;AAAA;AAAA,cANnD,eAOA;AAAQ,QAAA,OAAO,EAAEU,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPA,eAOyC;AAAA;AAAA;AAAA;AAAA,cAPzC,eAQA;AAAQ,QAAA,OAAO,EAAEE,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARA,eAQgD;AAAA;AAAA;AAAA;AAAA,cARhD,eAUA;AAAQ,QAAA,OAAO,EAAEK,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFI,mBADJ;AAqBC,CA/JD;;GAAM5D,O;;KAAAA,O;AAiKN,eAAeA,OAAf,C,CAWA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import React,{useEffect,useState} from \"react\"\nimport { Web3ReactProvider } from '@web3-react/core'\nimport { useWeb3React } from \"@web3-react/core\"\nimport { injected } from \"./img/Connnector\"\nimport Web3 from 'web3'\nimport BigNumber from \"bignumber.js\";\n\n\nimport Stakingabi from \"./Stakingabi.json\"\nimport CakeTokenabi from \"./CakeToken.json\"\nconst Staking = ()=>{\nconst [stakingamout,setstakingamout] = useState();\nconst [CakeCon,setCakeCon] = useState();\nconst [Stakingmainpool,setStakingmainpool] = useState();\nconst [user,ssetuser] = useState();\nconst [earn,setearn] = useState()\nconst [test,settestt] = useState(false);\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      await window.ethereum.enable();\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  };\n  const loadBlockchainData = async () => {\n    // setLoading(true);\n    if (\n      typeof window.ethereum == \"undefined\" \n    ) {\n      return;\n    }\n    const web3 = new Web3(window.ethereum);\n\n    let url = window.location.href;\n    const StakingContract = new web3.eth.Contract(Stakingabi.abi,\"0x4311F1bBd707a53823D0a7ed488507694C0A226C\");\n    setStakingmainpool(StakingContract);\n    const CaketokenCon = new web3.eth.Contract(CakeTokenabi.abi,\"0x16c189981660f8bf84c54c12351f0ba342b9ffc0\");\n    setCakeCon(CaketokenCon);\n    const accounts = await web3.eth.getAccounts();\n     ssetuser(accounts[0]);\n\n\n\n     //reward Earning \n    //  const balanceofuser = await hello.methods.balanceOf(accounts[0]).call();\n    const balanceofreward = await StakingContract.methods.earned(accounts[0]).call();\n    const TotalEarned = await web3.utils.fromWei(balanceofreward,'ether')\n    console.log(TotalEarned);\n    setearn(TotalEarned)\n    // setearn(Totalearning);  //reward Earning  \n\n    // const Tokensalecontact = new web3.eth.Contract(Tokensale.abi,\"0x9bD3FfF95ecd4DA1ba93679f87c9DEBc6b5fD534\")\n    //  let totalsupplyS = await hello.methods.totalSupply().call();\n    //  const totalsupply = await web3.utils.fromWei(totalsupplyS,'ether')\n\n\n        //Token price facthing \n\n    // if (accounts.length == 0) {\n    //   return;\n    // }\n    // setAccount(accounts[0]);\n    // const networkId = await web3.eth.net.getId();\n///user balance factching \n\n// const balanceofuser = await hello.methods.balanceOf(accounts[0]).call();\n// const totalsold = await Newtokensale.methods.totalsold().call();\n// const Tokenprice = await Tokensalecontact.methods.tokenprice().call();\n// const Realtokenprice = await web3.utils.fromWei(Tokenprice,'ether')\n// const totalsoldtotal = await web3.utils.fromWei(totalsold,'ether')\n// settotalsolda(totalsoldtotal)\n// const balanceofuserinwei = await web3.utils.fromWei(balanceofuser,'ether')\n// setbalanceofuser(balanceofuserinwei);};\n  }\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData();\n\n    //esl\n  }, []);\n\n\n////new \n\nconst change =(e)=>{\n    setstakingamout(e.target.value);\n\n};\nconst approve = async(s)=>{    \n  s.preventDefault();\n  const web3 = new Web3(window.ethereum);\n  const Amount = await web3.utils.toWei(stakingamout);\n  CakeCon.methods.approve(\"0x4311F1bBd707a53823D0a7ed488507694C0A226C\",Amount).\n  send({from:user.toString()}).on(\"transactionHash\", (hash) => {\n window.alert(\"wwooow\");\n\n\n})\n}\nconst Send = async (e)=>{\n    e.preventDefault();\n    const web3 = new Web3(window.ethereum);\n    const Amount = await web3.utils.toWei(stakingamout);\n  e.preventDefault();\n     Stakingmainpool.methods.stake(Amount).send({from:user.toString()}).on(\"transactionHash\",(hash)=>{\n      window.alert(\"sucess\");\n      settestt(true);\n      console.log(\"aaa\");\n    })\n\n};\nconst withdrawaasa = async (e)=>{\n    e.preventDefault();\n    const web3 = new Web3(window.ethereum);\n    const Amount = await web3.utils.toWei(stakingamout);\n   await Stakingmainpool.methods.withdraw(Amount).send({from:user.toString()}).once(\"recepient\", (recepient) => {\n    window.alert(\"WOW! withdraw Done\");\n    window.location.reload(true);\n   })\n   .on(\"error\", () => {\n     window.alert(\"plz Try Again \")\n   });;\n// await newtokensale.methods.buyTokens(newamountofethinwei).send({from:userdeta.toString() })\n//      .once(\"recepient\", (recepient) => {\n//       window.alert(\"sucess\");\n//       window.location.reload();\n//     })\n//     .on(\"error\", () => {\n//      window.alert(\"error \")\n//      });\n  \n//   }\n}\n//new\nconst Emergencry = async (e)=>{\n    e.preventDefault();\n    const web3 = new Web3(window.ethereum);\n    await Stakingmainpool.methods.getReward().send({from:user.toString()}).once(\"recepient\", (recepient) => {\n        window.alert(\"withdraw Done\");\n        window.location.reload();\n       })\n       .on(\"error\", () => {\n         window.alert(\"plz Try Again \")\n       })\n}\n\nreturn (\n    <>\n\n<form>\n\n\n<h1>Your Reward {earn}</h1>\n<input type=\"text\" onChange={change} value={stakingamout} required/>\n<br></br>\n<button onClick={approve}>Approve Contract</button><br/>\n<button onClick={Send}>Stake Now</button><br/>\n<button onClick={withdrawaasa}>withdraw</button><br/>\n\n<button onClick={Emergencry}>Emergencry withdraw</button>\n</form>\n</>\n)\n\n\n\n\n}\n\nexport default Staking;\n\n\n\n\n\n\n\n\n\n\n// const web3 = new Web3(window.ethereum);\n \n// const amountofethinwei = await web3.utils.toWei(a.toString())\n\n\n// await presalecontractinstance\n// .methods\n// .buyTokens()\n// .send({from:account , value : amountofethinwei })\n//   .once(\"recepient\", (recepient) => {\n//    window.alert(\"sucess\")\n//   })\n//   .on(\"error\", () => {\n//     window.alert(\"error \")\n//   })\n\n\n\n\n\n\n\n\n// CakeCon.methods.approve(\"0x4311F1bBd707a53823D0a7ed488507694C0A226C\",Amount).send({from:user.toString()}).on('transactionHash',(hash)=>{\n//   hash?\n//    Stakingmainpool.methods.stake(Amount).send({from:user.toString()}).on(\"transactionHash\",(hash)=>{\n//     window.alert(\"sucess\");\n\n//   }):\n//   window.alert(\"Failed\");"]},"metadata":{},"sourceType":"module"}