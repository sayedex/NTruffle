{"ast":null,"code":"var _jsxFileName = \"/home/sa/Desktop/Sayed/Sayed/src/Com/Staking.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Web3ReactProvider } from '@web3-react/core';\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"./img/Connnector\";\nimport Web3 from 'web3';\nimport Stakingabi from \"./Stakingabi.json\";\nimport CakeTokenabi from \"./CakeToken.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Staking = () => {\n  _s();\n\n  const [stakingamout, setstakingamout] = useState();\n  const [CakeCon, setCakeCon] = useState();\n  const [Stakingmainpool, setStakingmainpool] = useState();\n  const [user, ssetuser] = useState();\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      await window.ethereum.enable();\n    } else {\n      window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n    }\n  };\n\n  const loadBlockchainData = async () => {\n    // setLoading(true);\n    if (typeof window.ethereum == \"undefined\") {\n      return;\n    }\n\n    const web3 = new Web3(window.ethereum);\n    let url = window.location.href;\n    const StakingContract = new web3.eth.Contract(Stakingabi.abi, \"0x4311F1bBd707a53823D0a7ed488507694C0A226C\");\n    setStakingmainpool(StakingContract);\n    const CaketokenCon = new web3.eth.Contract(CakeTokenabi.abi, \"0x16C189981660F8bf84C54c12351f0ba342b9ffC0\");\n    setCakeCon(CaketokenCon);\n    const accounts = await web3.eth.getAccounts();\n    ssetuser(accounts[0]); // const Tokensalecontact = new web3.eth.Contract(Tokensale.abi,\"0x9bD3FfF95ecd4DA1ba93679f87c9DEBc6b5fD534\")\n    //  let totalsupplyS = await hello.methods.totalSupply().call();\n    //  const totalsupply = await web3.utils.fromWei(totalsupplyS,'ether')\n    //Token price facthing \n    // if (accounts.length == 0) {\n    //   return;\n    // }\n    // setAccount(accounts[0]);\n    // const networkId = await web3.eth.net.getId();\n    ///user balance factching \n    // const balanceofuser = await hello.methods.balanceOf(accounts[0]).call();\n    // const totalsold = await Newtokensale.methods.totalsold().call();\n    // const Tokenprice = await Tokensalecontact.methods.tokenprice().call();\n    // const Realtokenprice = await web3.utils.fromWei(Tokenprice,'ether')\n    // const totalsoldtotal = await web3.utils.fromWei(totalsold,'ether')\n    // settotalsolda(totalsoldtotal)\n    // const balanceofuserinwei = await web3.utils.fromWei(balanceofuser,'ether')\n    // setbalanceofuser(balanceofuserinwei);};\n  };\n\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData(); //esl\n  }, []); ////new \n\n  const change = e => {\n    setstakingamout(e.target.value);\n  };\n\n  const Send = async e => {\n    e.preventDefault();\n    const web3 = new Web3(window.ethereum);\n    const Amount = await web3.utils.toWei(stakingamout);\n    e.preventDefault();\n    CakeCon.methods.approve(\"0x4311F1bBd707a53823D0a7ed488507694C0A226C\", Amount).send({\n      from: user.toString()\n    }).on('transactionHash', hash => {\n      hash ? Stakingmainpool.methods.stake(Amount).send({\n        from: user.toString()\n      }).on(\"transactionHash\", hash => {\n        window.alert(\"sucess\");\n      }) : window.alert(\"Failed\");\n    });\n\n    const withdraw = async e => {}; // await newtokensale.methods.buyTokens(newamountofethinwei).send({from:userdeta.toString() })\n    //      .once(\"recepient\", (recepient) => {\n    //       window.alert(\"sucess\");\n    //       window.location.reload();\n    //     })\n    //     .on(\"error\", () => {\n    //      window.alert(\"error \")\n    //      });\n    //   }\n\n  }; //new\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Your Reward\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: change,\n        value: stakingamout,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onSubmit: Send,\n        children: \"Stake Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onSubmit: withdraw,\n        children: \"withdraw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 1\n    }, this)\n  }, void 0, false);\n};\n\n_s(Staking, \"87vs3dcPtmDn+w/YwUQhgd7lHFo=\");\n\n_c = Staking;\nexport default Staking; // const web3 = new Web3(window.ethereum);\n// const amountofethinwei = await web3.utils.toWei(a.toString())\n// await presalecontractinstance\n// .methods\n// .buyTokens()\n// .send({from:account , value : amountofethinwei })\n//   .once(\"recepient\", (recepient) => {\n//    window.alert(\"sucess\")\n//   })\n//   .on(\"error\", () => {\n//     window.alert(\"error \")\n//   })\n\nvar _c;\n\n$RefreshReg$(_c, \"Staking\");","map":{"version":3,"sources":["/home/sa/Desktop/Sayed/Sayed/src/Com/Staking.jsx"],"names":["React","useEffect","useState","Web3ReactProvider","useWeb3React","injected","Web3","Stakingabi","CakeTokenabi","Staking","stakingamout","setstakingamout","CakeCon","setCakeCon","Stakingmainpool","setStakingmainpool","user","ssetuser","loadWeb3","window","ethereum","enable","alert","loadBlockchainData","web3","url","location","href","StakingContract","eth","Contract","abi","CaketokenCon","accounts","getAccounts","change","e","target","value","Send","preventDefault","Amount","utils","toWei","methods","approve","send","from","toString","on","hash","stake","withdraw"],"mappings":"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","sourcesContent":["import React,{useEffect,useState} from \"react\"\nimport { Web3ReactProvider } from '@web3-react/core'\nimport { useWeb3React } from \"@web3-react/core\"\nimport { injected } from \"./img/Connnector\"\nimport Web3 from 'web3'\nimport Stakingabi from \"./Stakingabi.json\"\nimport CakeTokenabi from \"./CakeToken.json\"\nconst Staking = ()=>{\nconst [stakingamout,setstakingamout] = useState();\nconst [CakeCon,setCakeCon] = useState();\nconst [Stakingmainpool,setStakingmainpool] = useState();\nconst [user,ssetuser] = useState();\n\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      await window.ethereum.enable();\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  };\n  const loadBlockchainData = async () => {\n    // setLoading(true);\n    if (\n      typeof window.ethereum == \"undefined\" \n    ) {\n      return;\n    }\n    const web3 = new Web3(window.ethereum);\n\n    let url = window.location.href;\n    const StakingContract = new web3.eth.Contract(Stakingabi.abi,\"0x4311F1bBd707a53823D0a7ed488507694C0A226C\");\n    setStakingmainpool(StakingContract);\n    const CaketokenCon = new web3.eth.Contract(CakeTokenabi.abi,\"0x16C189981660F8bf84C54c12351f0ba342b9ffC0\");\n    setCakeCon(CaketokenCon);\n    const accounts = await web3.eth.getAccounts();\n     ssetuser(accounts[0]);\n    // const Tokensalecontact = new web3.eth.Contract(Tokensale.abi,\"0x9bD3FfF95ecd4DA1ba93679f87c9DEBc6b5fD534\")\n    //  let totalsupplyS = await hello.methods.totalSupply().call();\n    //  const totalsupply = await web3.utils.fromWei(totalsupplyS,'ether')\n\n\n        //Token price facthing \n\n    // if (accounts.length == 0) {\n    //   return;\n    // }\n    // setAccount(accounts[0]);\n    // const networkId = await web3.eth.net.getId();\n///user balance factching \n\n// const balanceofuser = await hello.methods.balanceOf(accounts[0]).call();\n// const totalsold = await Newtokensale.methods.totalsold().call();\n// const Tokenprice = await Tokensalecontact.methods.tokenprice().call();\n// const Realtokenprice = await web3.utils.fromWei(Tokenprice,'ether')\n// const totalsoldtotal = await web3.utils.fromWei(totalsold,'ether')\n// settotalsolda(totalsoldtotal)\n// const balanceofuserinwei = await web3.utils.fromWei(balanceofuser,'ether')\n// setbalanceofuser(balanceofuserinwei);};\n  }\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData();\n\n    //esl\n  }, []);\n\n\n////new \n\nconst change =(e)=>{\n    setstakingamout(e.target.value);\n\n}\n\nconst Send = async (e)=>{\n    e.preventDefault();\n    const web3 = new Web3(window.ethereum);\n    const Amount = await web3.utils.toWei(stakingamout);\n  e.preventDefault();    \n   CakeCon.methods.approve(\"0x4311F1bBd707a53823D0a7ed488507694C0A226C\",Amount).send({from:user.toString()}).on('transactionHash',(hash)=>{\n    hash?\n    Stakingmainpool.methods.stake(Amount).send({from:user.toString()}).on(\"transactionHash\",(hash)=>{\n      window.alert(\"sucess\");\n\n    }):\n    window.alert(\"Failed\");\n\n   })\n\nconst withdraw = async (e)=>{\n\n\n\n}\n\n\n\n\n// await newtokensale.methods.buyTokens(newamountofethinwei).send({from:userdeta.toString() })\n//      .once(\"recepient\", (recepient) => {\n//       window.alert(\"sucess\");\n//       window.location.reload();\n//     })\n//     .on(\"error\", () => {\n//      window.alert(\"error \")\n//      });\n  \n//   }\n}\n//new\n\n\nreturn (\n    <>\n\n<form>\n\n\n<h1>Your Reward</h1>\n<input type=\"text\" onChange={change} value={stakingamout} required/>\n<br></br>\n<button onSubmit={Send}>Stake Now</button>\n<br></br>\n<button onSubmit={withdraw}>withdraw</button>\n</form>\n\n    </>\n)\n\n\n\n\n}\n\nexport default Staking;\n\n\n\n\n\n\n\n\n\n\n// const web3 = new Web3(window.ethereum);\n \n// const amountofethinwei = await web3.utils.toWei(a.toString())\n\n\n// await presalecontractinstance\n// .methods\n// .buyTokens()\n// .send({from:account , value : amountofethinwei })\n//   .once(\"recepient\", (recepient) => {\n//    window.alert(\"sucess\")\n//   })\n//   .on(\"error\", () => {\n//     window.alert(\"error \")\n//   })"]},"metadata":{},"sourceType":"module"}