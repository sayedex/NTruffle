{"ast":null,"code":"import _regeneratorRuntime from\"/home/sa/Desktop/Sayed/Sayed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/sa/Desktop/Sayed/Sayed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import React,{useEffect,useState}from\"react\";import Web3 from'web3';import BigNumber from\"bignumber.js\";import{Typography,Button,TextField,Grid,CircularProgress,Alert}from'@mui/material';//test\nimport WalletConnectProvider from\"@walletconnect/web3-provider\";//token logo\nimport tokenlogo from\"./img/favicon.png\";import lock from\"./img/lock.png\";//staking abi\nimport staking from\"./staking.json\";import TRDC from\"./Devtoken.json\";import Web3Modal from\"web3modal\";//0x8e80131810Bb92479AFcf801b20Bbe9fD97A4229\nimport{jsx as _jsx}from\"react/jsx-runtime\";var Test=function Test(){//this is for walllet\n//  Create WalletConnect Provide\nvar provider=new WalletConnectProvider({rpc:{56:\"https://bsc-dataseed.binance.org/\"// ...\n},chainId:56,infuraId:\"d46dbd68f6df489cb73f9f2613eb8ccf\",qrcodeModalOptions:{mobileLinks:[\"rainbow\",\"metamask\",\"argent\",\"trust\",\"imtoken\",\"pillar\"]}});var Sayed=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var web3,accounts,StakingContract,Totalstaked,TRDcContract,result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return provider.enable();case 2:web3=new Web3(provider);_context.next=5;return web3.eth.getAccounts();case 5:accounts=_context.sent;console.log(accounts);StakingContract=new web3.eth.Contract(staking.abi,\"0xa5A48d169B87E1775658e66B3FF8C5A11e4549ab\");console.log(StakingContract);_context.next=11;return StakingContract.methods.Totalstakes(\"0xa5A48d169B87E1775658e66B3FF8C5A11e4549ab\").call();case 11:Totalstaked=_context.sent;console.log(Totalstaked);TRDcContract=new web3.eth.Contract(TRDC.abi,\"0x7e8db69dcff9209e486a100e611b0af300c3374e\");_context.next=16;return TRDcContract.methods.approve(\"0xa5A48d169B87E1775658e66B3FF8C5A11e4549ab\",1000).send({from:\"0x77Af6CEc25172d78c9464f0C6C09920F446F70Be\"});case 16:result=_context.sent;_context.next=19;return provider.disconnect();case 19:case\"end\":return _context.stop();}}},_callee);}));return function Sayed(){return _ref.apply(this,arguments);};}();var hasan=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:case\"end\":return _context2.stop();}}},_callee2);}));return function hasan(){return _ref2.apply(this,arguments);};}();var Sayed1=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var web3,accounts,StakingContract,Totalstaked;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:web3=new Web3(window.ethereum);_context3.next=3;return window.ethereum.enable();case 3:_context3.next=5;return web3.eth.getAccounts();case 5:accounts=_context3.sent;console.log(accounts);StakingContract=new web3.eth.Contract(staking.abi,\"0xa5A48d169B87E1775658e66B3FF8C5A11e4549ab\");console.log(StakingContract);_context3.next=11;return StakingContract.methods.Totalstakes(accounts[0]).call();case 11:Totalstaked=_context3.sent;console.log(Totalstaked);case 13:case\"end\":return _context3.stop();}}},_callee3);}));return function Sayed1(){return _ref3.apply(this,arguments);};}();return/*#__PURE__*/_jsx(\"botton\",{onClick:Sayed,children:\"Sayed\"});};export default Test;","map":{"version":3,"sources":["/home/sa/Desktop/Sayed/Sayed/src/Com/Tes.js"],"names":["React","useEffect","useState","Web3","BigNumber","Typography","Button","TextField","Grid","CircularProgress","Alert","WalletConnectProvider","tokenlogo","lock","staking","TRDC","Web3Modal","Test","provider","rpc","chainId","infuraId","qrcodeModalOptions","mobileLinks","Sayed","enable","web3","eth","getAccounts","accounts","console","log","StakingContract","Contract","abi","methods","Totalstakes","call","Totalstaked","TRDcContract","approve","send","from","result","disconnect","hasan","Sayed1","window","ethereum"],"mappings":"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","sourcesContent":["import React,{useEffect,useState} from \"react\"\nimport Web3 from 'web3'\nimport BigNumber from \"bignumber.js\";\nimport { Typography, Button, TextField, Grid, CircularProgress, Alert } from '@mui/material'\n//test\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\n//token logo\nimport tokenlogo from \"./img/favicon.png\"\nimport lock from \"./img/lock.png\"\n//staking abi\nimport staking from \"./staking.json\"\nimport TRDC from \"./Devtoken.json\"\nimport Web3Modal from \"web3modal\";\n\n//0x8e80131810Bb92479AFcf801b20Bbe9fD97A4229\nconst Test = ()=>{\n//this is for walllet\n//  Create WalletConnect Provide\nconst provider = new WalletConnectProvider({\n  rpc: {\n    56: \"https://bsc-dataseed.binance.org/\",\n    // ...\n  },\n  chainId:56,\n  infuraId:\"d46dbd68f6df489cb73f9f2613eb8ccf\",\n  qrcodeModalOptions: {\n    mobileLinks: [\n      \"rainbow\",\n      \"metamask\",\n      \"argent\",\n      \"trust\",\n      \"imtoken\",\n      \"pillar\",\n    ],\n  },\n});\n\nconst Sayed = async()=>{\n  await provider.enable();\n  const web3 = new Web3(provider);\n  const accounts = await web3.eth.getAccounts();\nconsole.log(accounts);\nconst StakingContract = new web3.eth.Contract(staking.abi,\"0xa5A48d169B87E1775658e66B3FF8C5A11e4549ab\");\nconsole.log(StakingContract);\nconst Totalstaked = await StakingContract.methods.Totalstakes(\"0xa5A48d169B87E1775658e66B3FF8C5A11e4549ab\").call();\nconsole.log(Totalstaked);\nconst TRDcContract = new web3.eth.Contract(TRDC.abi,\"0x7e8db69dcff9209e486a100e611b0af300c3374e\");\n\nconst result = await TRDcContract.methods.approve(\"0xa5A48d169B87E1775658e66B3FF8C5A11e4549ab\",1000).send({from:\"0x77Af6CEc25172d78c9464f0C6C09920F446F70Be\"})\nawait provider.disconnect()\n\n}\nconst hasan = async()=>{\n  \n}\nconst Sayed1= async()=>{\n  const web3 = new Web3(window.ethereum);\n  await window.ethereum.enable()\n  const accounts = await web3.eth.getAccounts();\nconsole.log(accounts);\nconst StakingContract = new web3.eth.Contract(staking.abi,\"0xa5A48d169B87E1775658e66B3FF8C5A11e4549ab\");\nconsole.log(StakingContract);\nconst Totalstaked = await StakingContract.methods.Totalstakes(accounts[0]).call();\nconsole.log(Totalstaked);\n}\n\n\nreturn (\n<botton onClick={Sayed}>Sayed</botton>\n)\n\n}\nexport default Test;"]},"metadata":{},"sourceType":"module"}