{"ast":null,"code":"var _jsxFileName = \"/home/sa/Desktop/Sayed/Sayed/src/Com/Staking.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Web3ReactProvider } from '@web3-react/core';\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"./img/Connnector\";\nimport Abi from \"./Abi.json\";\nimport Web3 from 'web3';\nimport Devtoken from \"./Devtoken.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Staking = () => {\n  _s();\n\n  const [stakingamout, setstakingamout] = useState();\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      await window.ethereum.enable();\n    } else {\n      window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n    }\n  };\n\n  const loadBlockchainData = async () => {\n    // setLoading(true);\n    if (typeof window.ethereum == \"undefined\") {\n      return;\n    }\n\n    const web3 = new Web3(window.ethereum);\n    let url = window.location.href;\n    const accounts = await web3.eth.getAccounts(); // const hello = new web3.eth.Contract(Devtoken.abi,\"0x4B9C6e95F3F80319303dEfdb8ae8Bf888b0b544F\");\n    // const Tokensalecontact = new web3.eth.Contract(Tokensale.abi,\"0x9bD3FfF95ecd4DA1ba93679f87c9DEBc6b5fD534\")\n    //  let totalsupplyS = await hello.methods.totalSupply().call();\n    //  const totalsupply = await web3.utils.fromWei(totalsupplyS,'ether')\n    //Token price facthing \n    // if (accounts.length == 0) {\n    //   return;\n    // }\n    // setAccount(accounts[0]);\n    // const networkId = await web3.eth.net.getId();\n    ///user balance factching \n    // const balanceofuser = await hello.methods.balanceOf(accounts[0]).call();\n    // const totalsold = await Newtokensale.methods.totalsold().call();\n    // const Tokenprice = await Tokensalecontact.methods.tokenprice().call();\n    // const Realtokenprice = await web3.utils.fromWei(Tokenprice,'ether')\n    // const totalsoldtotal = await web3.utils.fromWei(totalsold,'ether')\n    // settotalsolda(totalsoldtotal)\n    // const balanceofuserinwei = await web3.utils.fromWei(balanceofuser,'ether')\n    // setbalanceofuser(balanceofuserinwei);};\n  };\n\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData(); //esl\n  }, []); ////new \n\n  const change = e => {\n    setstakingamout(e.target.value);\n  };\n\n  const Send = async e => {\n    e.preventDefault(); // await newtokensale.methods.buyTokens(newamountofethinwei).send({from:userdeta.toString() })\n    //      .once(\"recepient\", (recepient) => {\n    //       window.alert(\"sucess\");\n    //       window.location.reload();\n    //     })\n    //     .on(\"error\", () => {\n    //      window.alert(\"error \")\n    //      });\n    //   }\n  }; //new\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: Send,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Your Reward\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: change,\n        value: stakingamout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Stake Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 1\n    }, this)\n  }, void 0, false);\n};\n\n_s(Staking, \"QpDxM6/f2/DDrZGAjYL/SenETFU=\");\n\n_c = Staking;\nexport default Staking; // const web3 = new Web3(window.ethereum);\n// const amountofethinwei = await web3.utils.toWei(a.toString())\n// await presalecontractinstance\n// .methods\n// .buyTokens()\n// .send({from:account , value : amountofethinwei })\n//   .once(\"recepient\", (recepient) => {\n//    window.alert(\"sucess\")\n//   })\n//   .on(\"error\", () => {\n//     window.alert(\"error \")\n//   })\n\nvar _c;\n\n$RefreshReg$(_c, \"Staking\");","map":{"version":3,"sources":["/home/sa/Desktop/Sayed/Sayed/src/Com/Staking.jsx"],"names":["React","useEffect","useState","Web3ReactProvider","useWeb3React","injected","Abi","Web3","Devtoken","Staking","stakingamout","setstakingamout","loadWeb3","window","ethereum","enable","alert","loadBlockchainData","web3","url","location","href","accounts","eth","getAccounts","change","e","target","value","Send","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,QAAuC,OAAvC;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,iBAArB;;;;AACA,MAAMC,OAAO,GAAG,MAAI;AAAA;;AACpB,QAAM,CAACC,YAAD,EAAcC,eAAd,IAAiCT,QAAQ,EAA/C;;AAIE,QAAMU,QAAQ,GAAG,YAAY;AAC3B,QAAIC,MAAM,CAACC,QAAX,EAAqB;AACnB,YAAMD,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAAN;AACD,KAFD,MAEO;AACLF,MAAAA,MAAM,CAACG,KAAP,CACE,qEADF;AAGD;AACF,GARD;;AASA,QAAMC,kBAAkB,GAAG,YAAY;AACrC;AACA,QACE,OAAOJ,MAAM,CAACC,QAAd,IAA0B,WAD5B,EAEE;AACA;AACD;;AACD,UAAMI,IAAI,GAAG,IAAIX,IAAJ,CAASM,MAAM,CAACC,QAAhB,CAAb;AAEA,QAAIK,GAAG,GAAGN,MAAM,CAACO,QAAP,CAAgBC,IAA1B;AACA,UAAMC,QAAQ,GAAG,MAAMJ,IAAI,CAACK,GAAL,CAASC,WAAT,EAAvB,CAVqC,CAWrC;AACA;AACA;AACA;AAII;AAEJ;AACA;AACA;AACA;AACA;AACJ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,GAnCD;;AAoCAvB,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,QAAQ;AACRK,IAAAA,kBAAkB,GAFJ,CAId;AACD,GALQ,EAKN,EALM,CAAT,CAlDkB,CA0DpB;;AAEA,QAAMQ,MAAM,GAAGC,CAAD,IAAK;AACff,IAAAA,eAAe,CAACe,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;AAEH,GAHD;;AAKA,QAAMC,IAAI,GAAG,MAAOH,CAAP,IAAW;AACtBA,IAAAA,CAAC,CAACI,cAAF,GADsB,CAKxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACC,GAfD,CAjEoB,CAiFpB;;;AAGA,sBACI;AAAA,2BAEJ;AAAM,MAAA,QAAQ,EAAED,IAAhB;AAAA,8BAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHA,eAIA;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAEJ,MAA7B;AAAqC,QAAA,KAAK,EAAEf;AAA5C;AAAA;AAAA;AAAA;AAAA,cAJA,eAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFI,mBADJ;AAiBC,CArGD;;GAAMD,O;;KAAAA,O;AAuGN,eAAeA,OAAf,C,CAWA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React,{useEffect,useState} from \"react\"\nimport { Web3ReactProvider } from '@web3-react/core'\nimport { useWeb3React } from \"@web3-react/core\"\nimport { injected } from \"./img/Connnector\"\nimport Abi from \"./Abi.json\"\nimport Web3 from 'web3'\nimport Devtoken from \"./Devtoken.json\"\nconst Staking = ()=>{\nconst [stakingamout,setstakingamout] = useState();\n\n\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      await window.ethereum.enable();\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  };\n  const loadBlockchainData = async () => {\n    // setLoading(true);\n    if (\n      typeof window.ethereum == \"undefined\" \n    ) {\n      return;\n    }\n    const web3 = new Web3(window.ethereum);\n\n    let url = window.location.href;\n    const accounts = await web3.eth.getAccounts();\n    // const hello = new web3.eth.Contract(Devtoken.abi,\"0x4B9C6e95F3F80319303dEfdb8ae8Bf888b0b544F\");\n    // const Tokensalecontact = new web3.eth.Contract(Tokensale.abi,\"0x9bD3FfF95ecd4DA1ba93679f87c9DEBc6b5fD534\")\n    //  let totalsupplyS = await hello.methods.totalSupply().call();\n    //  const totalsupply = await web3.utils.fromWei(totalsupplyS,'ether')\n\n\n\n        //Token price facthing \n\n    // if (accounts.length == 0) {\n    //   return;\n    // }\n    // setAccount(accounts[0]);\n    // const networkId = await web3.eth.net.getId();\n///user balance factching \n\n// const balanceofuser = await hello.methods.balanceOf(accounts[0]).call();\n// const totalsold = await Newtokensale.methods.totalsold().call();\n// const Tokenprice = await Tokensalecontact.methods.tokenprice().call();\n// const Realtokenprice = await web3.utils.fromWei(Tokenprice,'ether')\n// const totalsoldtotal = await web3.utils.fromWei(totalsold,'ether')\n// settotalsolda(totalsoldtotal)\n// const balanceofuserinwei = await web3.utils.fromWei(balanceofuser,'ether')\n// setbalanceofuser(balanceofuserinwei);};\n  }\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData();\n\n    //esl\n  }, []);\n\n\n////new \n\nconst change =(e)=>{\n    setstakingamout(e.target.value);\n\n}\n\nconst Send = async (e)=>{\n  e.preventDefault();    \n\n\n\n// await newtokensale.methods.buyTokens(newamountofethinwei).send({from:userdeta.toString() })\n//      .once(\"recepient\", (recepient) => {\n//       window.alert(\"sucess\");\n//       window.location.reload();\n//     })\n//     .on(\"error\", () => {\n//      window.alert(\"error \")\n//      });\n  \n//   }\n}\n//new\n\n\nreturn (\n    <>\n\n<form onSubmit={Send}>\n\n\n<h1>Your Reward</h1>\n<input type=\"text\" onChange={change} value={stakingamout}/>\n<button>Stake Now</button>\n</form>\n\n    </>\n)\n\n\n\n\n}\n\nexport default Staking;\n\n\n\n\n\n\n\n\n\n\n// const web3 = new Web3(window.ethereum);\n \n// const amountofethinwei = await web3.utils.toWei(a.toString())\n\n\n// await presalecontractinstance\n// .methods\n// .buyTokens()\n// .send({from:account , value : amountofethinwei })\n//   .once(\"recepient\", (recepient) => {\n//    window.alert(\"sucess\")\n//   })\n//   .on(\"error\", () => {\n//     window.alert(\"error \")\n//   })"]},"metadata":{},"sourceType":"module"}